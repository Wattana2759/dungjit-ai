from celery import Celery
from app import extract_payment_info, add_or_update_user, push_line_message, log_usage
from PIL import Image
import pytesseract
import cv2
import os

celery = Celery("tasks", broker="redis://localhost:6379/0")

@celery.task
def process_slip_async(user_id, user_name, filepath):
    try:
        # ‚úÖ Resize image if too large
        img = cv2.imread(filepath)
        if img is None:
            raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")

        h, w = img.shape[:2]
        if w > 1000:
            new_w = 1000
            new_h = int(h * (1000 / w))
            img = cv2.resize(img, (new_w, new_h))
            cv2.imwrite(filepath, img)

        # ‚úÖ OCR with Tesseract
        ocr_text = pytesseract.image_to_string(Image.open(filepath), lang="eng+tha")

        # ‚úÖ Extract payment info (name / amount)
        info = extract_payment_info(ocr_text)
        if not info["amount"]:
            push_line_message(user_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏™‡∏•‡∏¥‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            log_usage(user_id, "‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"OCR: {ocr_text}")
            return

        amount_paid = int(float(info["amount"]))
        add_or_update_user(user_id, user_name, amount_paid, os.path.basename(filepath))

        # ‚úÖ Notify user
        push_line_message(user_id, f"üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå {amount_paid} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")
        log_usage(user_id, "‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ", f"OCR: {info}")

    except Exception as e:
        push_line_message(user_id, f"‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: {str(e)}")
        log_usage(user_id, "‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"Error: {str(e)}")

