from flask import Flask, request, jsonify
import os
import requests
from datetime import datetime
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
import openai
import threading
import time
import re

# === LOAD ENV ===
load_dotenv()
app = Flask(__name__)

# === ENV & CONFIG ===
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SHEET_NAME_USERS = os.getenv("SHEET_NAME_USERS")
SHEET_NAME_LOGS = os.getenv("SHEET_NAME_LOGS")
PUBLIC_URL = os.getenv("PUBLIC_URL", "http://localhost:5000")
ADMIN_USER = os.getenv("ADMIN_USER", "admin")
ADMIN_PASS = os.getenv("ADMIN_PASS", "1234")

openai.api_key = OPENAI_API_KEY

# === GOOGLE SHEETS SETUP ===
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
service_account_info = {
    "type": os.getenv("GOOGLE_TYPE"),
    "project_id": os.getenv("GOOGLE_PROJECT_ID"),
    "private_key_id": os.getenv("GOOGLE_PRIVATE_KEY_ID"),
    "private_key": os.getenv("GOOGLE_PRIVATE_KEY").replace('\\n', '\n'),
    "client_email": os.getenv("GOOGLE_CLIENT_EMAIL"),
    "client_id": os.getenv("GOOGLE_CLIENT_ID"),
    "auth_uri": os.getenv("GOOGLE_AUTH_URI"),
    "token_uri": os.getenv("GOOGLE_TOKEN_URI"),
    "auth_provider_x509_cert_url": os.getenv("GOOGLE_AUTH_PROVIDER_X509_CERT_URL"),
    "client_x509_cert_url": os.getenv("GOOGLE_CLIENT_X509_CERT_URL"),
}
creds = Credentials.from_service_account_info(service_account_info, scopes=SCOPES)
gc = gspread.authorize(creds)

try:
    users_sheet = gc.open_by_key(GOOGLE_SHEET_ID).worksheet(SHEET_NAME_USERS)
except Exception as e:
    users_sheet = None
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Users Sheet:", e)

try:
    logs_sheet = gc.open_by_key(GOOGLE_SHEET_ID).worksheet(SHEET_NAME_LOGS)
except Exception as e:
    logs_sheet = None
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Logs Sheet:", e)

# === LINE FUNCTIONS ===
def send_line_message(reply_token, text):
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}", "Content-Type": "application/json"}
    body = {"replyToken": reply_token, "messages": [{"type": "text", "text": text}]}
    requests.post("https://api.line.me/v2/bot/message/reply", headers=headers, json=body)

def push_line_message(user_id, text):
    headers = {"Authorization": f"Bearer {LINE_ACCESS_TOKEN}", "Content-Type": "application/json"}
    body = {"to": user_id, "messages": [{"type": "text", "text": text}]}
    requests.post("https://api.line.me/v2/bot/message/push", headers=headers, json=body)

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢ ===
def is_valid_thai_text(text):
    return bool(re.match(r'^[\u0E00-\u0E7F0-9\s\.,\?!]+$', text))
    
# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î ===
def normalize_birthdate(text):
    match = re.match(r'^(\d{1,2})[-/](\d{1,2})[-/](\d{2,4})$', text)
    if match:
        d, m, y = map(int, match.groups())
        if y < 100: y += 2500
        return f"{d:02d}/{m:02d}/{y}"
    return text

# === AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î ===
def get_fortune_from_birthdate(birthdate_text):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÑ‡∏ó‡∏¢‡πÇ‡∏ö‡∏£‡∏≤‡∏ì ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢

‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {birthdate_text}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç ‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏î‡∏°‡∏ô‡∏ï‡πå ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: {str(e)}"

# === AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ===
def get_fortune(message):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≠‡∏î‡∏π‡πÑ‡∏ó‡∏¢‡πÇ‡∏ö‡∏£‡∏≤‡∏ì ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏Ç‡∏ô‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡πÇ‡∏ö‡∏£‡∏≤‡∏ì ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏• ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏≠‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏• ‡∏ö‡∏∏‡∏ç‡∏Å‡∏£‡∏£‡∏° ‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ß‡πâ‡∏û‡∏£‡∏∞ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: "{message}"

‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô "17-10-2536", "1/1/2520", ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ‡∏î‡∏ß‡∏á ‡∏î‡∏π‡∏î‡∏ß‡∏á ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏≤‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î ‡∏õ‡∏µ‡∏ô‡∏±‡∏Å‡∏©‡∏±‡∏ï‡∏£ ‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô ‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡∏±‡πâ‡∏ô ‡πÜ

‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î", "‡∏´‡∏ß‡∏¢", ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•", "‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì:

‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏á ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡πÄ‡∏•‡∏Ç‡∏î‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏´‡∏£‡∏∑‡∏≠ 16 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ) ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á ‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÉ‡∏ô LINE ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:
- üìå ‡∏°‡πâ‡∏≤‡∏ß‡∏¥‡πà‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
- üìå ‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏∂‡πà‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 3 ‡∏ï‡∏±‡∏ß ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
- üìå ‡πÄ‡∏û‡∏ä‡∏£‡∏Å‡∏•‡πâ‡∏≤: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô, ‡∏Ñ‡∏π‡πà‡πÄ‡∏•‡∏Ç‡∏à‡∏±‡∏ö‡πÄ‡∏î‡πà‡∏ô ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
- üìå ‡πÄ‡∏•‡∏Ç‡∏ò‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ): ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ò‡∏π‡∏õ 3 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡πÉ‡∏î‡∏Å‡πá‡∏ï‡∏≤‡∏°
- üìå ‡πÄ‡∏•‡∏Ç‡∏Ç‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏ô‡∏ï‡πå: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏ô‡∏ï‡πå ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
- üìå ‡πÄ‡∏•‡∏Ç‡∏≠‡∏±‡πâ‡∏ô / ‡πÄ‡∏•‡∏Ç‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏
- üìå ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 10 ‡∏á‡∏ß‡∏î: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢ 2 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞ 3 ‡∏ï‡∏±‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥

‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏≤‡∏á‡∏™‡∏≥‡∏ô‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏ß‡πà‡∏≤ ‚Äú‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Äù ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô

‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡πÄ‡∏ä‡πà‡∏ô:
‚Äú‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ ‡∏°‡∏µ‡∏•‡∏≤‡∏†‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üôèüçÄ‚Äù

‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        return f"‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏≠‡∏î‡∏π AI ‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: {str(e)}"
        
# === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ===
def log_usage(user_id, action, detail):
    if logs_sheet:
        try:
            logs_sheet.append_row([datetime.now().isoformat(), user_id, action, detail])
        except Exception as e:
            print("Log error:", e)

# === WEBHOOK ===
@app.route("/webhook", methods=["POST"])
def webhook():
    if not request.is_json:
        return jsonify({"status": "error", "message": "Content-Type must be application/json"}), 400
        
    data = request.json
    for event in data.get("events", []):
        if event["type"] != "message":
            continue

        reply_token = event["replyToken"]
        user_id = event["source"]["userId"]
        message = event["message"].get("text", "").strip()

        if not message:
            send_line_message(reply_token, "üìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏ß‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            continue

        if not is_valid_thai_text(message) and not re.search(r'\d{1,2}[-/]\d{1,2}[-/]\d{2,4}', message):
            send_line_message(reply_token, "üìå ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏ß‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            continue

        send_line_message(reply_token, "üßò‚Äç‚ôÄÔ∏è ‡∏´‡∏°‡∏≠‡∏î‡∏π‡∏Å‡∏≥‡∏•‡∏±‡∏á ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")

        def reply_later():
    match = re.search(r'\d{1,2}[-/]\d{1,2}[-/]\d{2,4}', message)
    reply = get_fortune_from_birthdate(normalize_birthdate(match.group())) if match else get_fortune(message)
    push_line_message(user_id, reply)
    log_usage(user_id, "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ", message)

    try:
        records = users_sheet.get_all_records()
        for i, row in enumerate(records, start=2):
            if row["user_id"] == user_id:
                question_count = int(row.get("question_count", 0)) + 1
                invite_sent = str(row.get("invite_sent", "")).lower().strip()

                users_sheet.update_cell(i, 4, question_count)  # column D = question_count

                if question_count >= 5 and invite_sent != "true":
                    text = (
                        "üì¢ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏î‡∏ß‡∏á‡∏à‡∏¥‡∏ï‡∏´‡∏°‡∏≠‡∏î‡∏π AI ‡∏ö‡πà‡∏≠‡∏¢!\n"
                        "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÄ‡∏£‡∏≤ ‡∏Ç‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡∏∏‡∏ì‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ä‡∏£‡πå‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì "
                        "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏•‡∏¢ üëâ https://lin.ee/7LgReP1"
                    )
                    push_line_message(user_id, text)
                    users_sheet.update_cell(i, 5, "TRUE")  # column E = invite_sent
                break
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ user_id ‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            users_sheet.append_row([user_id, "", "", 1, ""])  # column D = question_count = 1
    except Exception as e:
        print("invite check error:", e)


        threading.Thread(target=reply_later).start()

    return jsonify({"status": "ok"})

# === HEALTH CHECK ===
@app.route("/healthz")
def healthz():
    return "OK", 200

# === AUTO PING TO PREVENT SLEEP ===
def auto_ping():
    while True:
        try:
            requests.get(f"{PUBLIC_URL}/healthz", timeout=10)
            print("üîÅ Auto-ping sent")
        except Exception as e:
            print("‚ö†Ô∏è Auto-ping error:", e)
        time.sleep(300)

threading.Thread(target=auto_ping, daemon=True).start()

# === START ===
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)), debug=True)

application = app
